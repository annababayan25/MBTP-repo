@using System.Data
@using MBTP.Controllers
@using MBTP.Retrieval
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

@{
    DateTime startDate = ViewBag.date != null ? (DateTime)ViewBag.date : DateTime.Now.AddDays(-4);
    DateTime fiscalYearStartDate = ViewBag.fiscalYearStartDate;
    var whichMonth = ViewBag.WhichMonth;    
    var yearName = startDate.ToString("yyyy");
    DateTime currentDate = DateTime.Now;
    DateTime monthStart = new DateTime(startDate.Year, startDate.Month, 1);
    DateTime monthEnd = monthStart.AddMonths(1).AddDays(-1);
    int daysThisMonth = DateTime.DaysInMonth(startDate.Year, startDate.Month);
    TimeSpan daysDiff = monthStart - fiscalYearStartDate;
    int fiscalDays = daysDiff.Days - 1; // number of days elapsed in fiscal year prior to start of report month
    var TwelveP = 1.12m;
    var FiveP = 1.05m;
    var EightP = 1.08m;

    decimal totalSites = 0;
    decimal totalRentals = 0;
    decimal totalLockFees = 0;
    decimal totalExVeh = 0;
    decimal totalDamageFees = 0;
    decimal totalLate = 0;
    decimal totalManRef = 0;
    decimal totalVisit = 0;
    decimal totalTaxLi = 0;
    decimal totalGolf = 0;
    decimal totalManRefGolf = 0;
    decimal totalGross = 0;
    decimal totalNetRevSub = 0;
    decimal totalAnnual = 0;
    decimal totalEmployee = 0;
    decimal totalLTS = 0;
    decimal totalLTR = 0;
    decimal totalMHP = 0;
    decimal totalManRef2 = 0;
    decimal totalNonTaxSub = 0;
    decimal totalStorage = 0;
    decimal totalTransf = 0;
    decimal totalMisc = 0;
    decimal totalManRef3 = 0;
    decimal totalNonTax = 0;
    decimal totalNetRevenue1 = 0;
    decimal ptotalSites = 0;
    decimal ptotalRentals = 0;
    decimal ptotalLockFees = 0;
    decimal ptotalExVeh = 0;
    decimal ptotalDamageFees = 0;
    decimal ptotalLate = 0;
    decimal ptotalManRef = 0;
    decimal ptotalVisit = 0;
    decimal ptotalTaxLi = 0;
    decimal ptotalGolf = 0;
    decimal ptotalManRefGolf = 0;
    decimal ptotalGross = 0;
    decimal ptotalNetRevSub = 0;
    decimal ptotalAnnual = 0;
    decimal ptotalEmployee = 0;
    decimal ptotalLTS = 0;
    decimal ptotalLTR = 0;
    decimal ptotalMHP = 0;
    decimal ptotalManRef2 = 0;
    decimal ptotalNonTaxSub = 0;
    decimal ptotalStorage = 0;
    decimal ptotalTransf = 0;
    decimal ptotalMisc = 0;
    decimal ptotalManRef3 = 0;
    decimal ptotalNonTax = 0;
    decimal ptotalNetRevenue1 = 0;
    decimal p2totalSites = 0;
    decimal p2totalRentals = 0;
    decimal p2totalLockFees = 0;
    decimal p2totalExVeh = 0;
    decimal p2totalDamageFees = 0;
    decimal p2totalLate = 0;
    decimal p2totalManRef = 0;
    decimal p2totalVisit = 0;
    decimal p2totalTaxLi = 0;
    decimal p2totalGolf = 0;
    decimal p2totalManRefGolf = 0;
    decimal p2totalGross = 0;
    decimal p2totalNetRevSub = 0;
    decimal p2totalAnnual = 0;
    decimal p2totalEmployee = 0;
    decimal p2totalLTS = 0;
    decimal p2totalLTR = 0;
    decimal p2totalMHP = 0;
    decimal p2totalManRef2 = 0;
    decimal p2totalNonTaxSub = 0;
    decimal p2totalStorage = 0;
    decimal p2totalTransf = 0;
    decimal p2totalMisc = 0;
    decimal p2totalManRef3 = 0;
    decimal p2totalNonTax = 0;
    decimal p2totalNetRevenue1 = 0;
    decimal projSites = 0;
    decimal projRentals = 0;
    decimal projLockFees = 0;
    decimal projExVeh = 0;
    decimal projDamageFees = 0;
    decimal projLate = 0;
    decimal projManRef = 0;
    decimal projVisit = 0;
    decimal projGolf = 0;
    decimal projManRefGolf = 0;
    decimal projGross = 0;
    decimal projTaxLi = 0;
    decimal projNetRevSub = 0;
    decimal projAnnual = 0;
    decimal projEmployee = 0;
    decimal projLTS = 0;
    decimal projLTR = 0;
    decimal projMHP = 0;
    decimal projManRef2 = 0;
    decimal projNonTaxSub = 0;
    decimal projStorage = 0;
    decimal projTransf = 0;
    decimal projMisc = 0;
    decimal projManRef3 = 0;
    decimal projNonTax = 0;
    decimal projNetRevenue1 = 0;
}
<div class='head-container'>
   <h1>Day-To-Day Information for @startDate.ToString("MMMM yyyy")</h1>
    <p>&nbsp;</p>
    @if(whichMonth != "None")
    {
        <a class="pdfButton" asp-area="" asp-controller="FDB" asp-action="Monthly" asp-route-whichMonth=@whichMonth>Back to selected month</a>
        <p>&nbsp;</p>
    }
   <p>Single click the table to jump to the month-by-month breakdown</p>
</div>

<body>
@if (Model is not null && Model.Tables[0].Rows.Count > 0)
{
<table id="daily-table" class="breakdown clickable-tableF" data-MonthlyBreakdown="/FDB/MonthlyBreakdownF" style="width:240px">
   <tr>
       <th class="breakdownBigTitle" colspan="28">Front Office</th>
   </tr>
   <tr>
       <th class="breakdownMonth" rowspan="3" colspan="1"><br><br>Day</th>
       <th class="breakdownTaxBig" colspan="7">Taxable Transactions: 12% (Tax Inclusive)</th>
       <th class="breakdownTaxBig" colspan="1">Tax: 5% (Tax Inclusive)</th>
       <th class="breakdownTaxBig" colspan="2">Tax: 8% (Tax Inclusive)</th>
       <th class="breakdownTaxBig" colspan="3">Taxable Transactions Summary:</th>
       <th class="breakdownMonth" rowspan="3" colspan="1"><br><br>Day</th>
       <th class="breakdownTaxBig" colspan="12">No Tax Transactions:</th>
       <th class="breakdownTotalsHead" rowspan="3">Total Net Revenue</th>
   </tr>
   <tr>
       <th class="breakdownTitle">304</th>
       <th class="breakdownTitle">307</th>
       <th class="breakdownTitle">309</th>
       <th class="breakdownTitle">361</th>
       <th class="breakdownTitle">310</th>
       <th class="breakdownTitle">311</th>
       <th class="breakdownRefTitle" rowspan="2">Manual Refunds Generated</th>
       <th class="breakdownTitle">360</th>
       <th class="breakdownTitle" colspan="2">362</th>
       <th class="breakdownTotalsHead" rowspan="2">Gross Revenue</th>
       <th class="breakdownTotalsHead" rowspan="2">Total Tax Liability</th>
       <th class="breakdownTotalsHead" rowspan="2">Net Revenue Subtotal</th>
       <th class="breakdownTitle" colspan="4">302</th>
       <th class="breakdownTitle">306</th>
       <th class="breakdownRefTitle" rowspan="2">Manual Refunds Generated</th>
       <th class="breakdownTotalsHead" rowspan="2">Non-Taxable Stays Subtotal</th>
       <th class="breakdownTitle">356</th>
       <th class="breakdownTitle">358</th>
       <th class="breakdownTitle">925</th>
       <th class="breakdownRefTitle" rowspan="2">Manual Refunds Generated</th>
       <th class="breakdownTotalsHead" rowspan="2">Other Non-Taxable Subtotal</th>
   </tr>
   <tr>
       <th class="breakdownTitle">Sites</th>
       <th class="breakdownTitle">Rentals</th>
       <th class="breakdownTitle">Lock Fees</th>
       <th class="breakdownTitle">Extra Vehicle Fees</th>
       <th class="breakdownTitle">Damage Fees</th>
       <th class="breakdownTitle">Late Fees</th>
       <th class="breakdownTitle">Visitor Fees</th>
       <th class="breakdownTitle">Golf Cart Rentals</th>
       <th class="breakdownRefTitle">Manual Refunds Generated</th>
       <th class="breakdownTitle">Annual Leases</th>
       <th class="breakdownTitle">Employee</th>
       <th class="breakdownTitle">LT Sites</th>
       <th class="breakdownTitle">LT Rentals</th>
       <th class="breakdownTitle">MH Park</th>
       <th class="breakdownTitle">Storage</th>
       <th class="breakdownTitle">Transfer Fees</th>
       <th class="breakdownTitle">Misc</th>
   </tr>
   @foreach (DataRow row in Model!.Tables[0].Rows)
   {
       var transDate = (DateTime)row["TransDate"];

       var sites = (decimal)row["SiteTotal"];
       var rentals = (decimal)row["RentalsTotal"];
       var locks = (decimal)row["LocksTotal"];
       var exVeh = (decimal)row["ExVeh"];
       var damages = (decimal)row["DamageFees"];
       var late = (decimal)row["LateFees"];
       var visit = (decimal)row["VisitorFees"];
       var manRef = (decimal)row["ManRefunds"];
       var golf = (decimal)row["GolfRentals"];
       var manRefGolf = (decimal)row["ManRefundsGolf"];
       var annual = (decimal)row["AnnualTotal"];
       var employee = (decimal)row["Employee"];
       var lts = (decimal)row["LTSites"];
       var ltr = (decimal)row["LTRentals"];
       var mhp = (decimal)row["MHPark"];
       var manRefnt = (decimal)row["ManRefundsNT"];
       var storage = (decimal)row["Storage"];
       var transfers = (decimal)row["TransferFees"];
       var misc = (decimal)row["Misc"];
       var manRefnt2 = (decimal)row["ManRefundsNT2"];
       var grossRevenue1 = (sites + rentals + locks + exVeh + damages + visit + golf - manRef - manRefGolf);
       var new1 = ((grossRevenue1 - visit - golf) / TwelveP) + (visit / FiveP) + (golf / EightP);
       var taxLi = grossRevenue1 - new1;
       var netRevSub = grossRevenue1 - taxLi;
       var noTaxSub = annual + employee + lts + ltr + mhp - manRefnt;
       var nonTax = storage + transfers + misc - manRefnt2;
       var netRevenue1 = netRevSub + noTaxSub + nonTax;

       totalSites += sites;
       totalRentals += rentals;
       totalLockFees += locks;
       totalExVeh += exVeh;
       totalDamageFees += damages;
       totalLate += late;
       totalManRef += manRef;
       totalVisit += visit;
       totalGolf += golf;
       totalManRefGolf += manRefGolf;
       totalGross += grossRevenue1;
       totalTaxLi += taxLi;
       totalNetRevSub += netRevSub;
       totalAnnual += annual;
       totalEmployee += employee;
       totalLTS += lts;
       totalLTR += ltr;
       totalMHP += mhp;
       totalManRef2 += manRefnt;
       totalNonTaxSub += noTaxSub;
       totalStorage += storage;
       totalTransf += transfers;
       totalMisc += misc;
       totalManRef3 += manRefnt2;
       totalNonTax += nonTax;
       totalNetRevenue1 += netRevenue1;

        <tr class="colorAlt" data-date="@transDate.ToString("yyyy-MM-dd")">
           <td class="breakdownDate">@transDate.ToString("MM/dd")</td>
           <td class="breakdownData">@sites</td>
           <td class="breakdownData">@rentals</td>
           <td class="breakdownData">@locks</td>
           <td class="breakdownData">@exVeh</td>
           <td class="breakdownData">@damages</td>
           <td class="breakdownData">@late</td>
           <td class="breakdownRef">@manRef</td>
           <td class="breakdownData">@visit</td>
           <td class="breakdownData">@golf</td>
           <td class="breakdownRef">@manRefGolf</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", grossRevenue1)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", taxLi)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", netRevSub)</td>
           <td class="breakdownDate">@transDate.ToString("MM/dd")</td>
           <td class="breakdownData">@annual</td>
           <td class="breakdownData">@employee</td>
           <td class="breakdownData">@lts</td>
           <td class="breakdownData">@ltr</td>
           <td class="breakdownData">@mhp</td>
           <td class="breakdownRef">@manRefnt</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", noTaxSub)</td>
           <td class="breakdownData">@storage</td>
           <td class="breakdownData">@transfers</td>
           <td class="breakdownData">@misc</td>
           <td class="breakdownRef">@String.Format("{0:F2}", manRefnt2)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", nonTax)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", netRevenue1)</td>
        </tr>
    }
    <tr>
        <td class="breakdownMonthSmallText">Month-to-Date Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalSites)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalRentals)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalLockFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalExVeh)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalDamageFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalLate)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalManRef)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalVisit)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalManRefGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalGross)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalTaxLi)</td>      
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalNetRevSub)</td>
        <td class="breakdownMonthSmallText">Month-to-Date Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalAnnual)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalEmployee)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalLTS)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalLTR)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalMHP)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalManRef2)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalNonTaxSub)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalStorage)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalTransf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalMisc)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalManRef3)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalNonTax)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", totalNetRevenue1)</td>
    </tr>
    @if (startDate.Month == currentDate.Month)
    {
        int totalFiscalDays = fiscalDays + Model.Tables[0].Rows.Count;
        int monthDaysRemaining = daysThisMonth - Model.Tables[0].Rows.Count;
        projSites = totalSites + (((decimal)Model.Tables["YTD"].Rows[0]["SiteTotal"] / totalFiscalDays) * monthDaysRemaining);
        projRentals = totalRentals + (((decimal)Model.Tables["YTD"].Rows[0]["RentalsTotal"] / totalFiscalDays) * monthDaysRemaining);
        projLockFees = totalLockFees + (((decimal)Model.Tables["YTD"].Rows[0]["LockTotal"] / totalFiscalDays) * monthDaysRemaining);
        projExVeh = totalExVeh + (((decimal)Model.Tables["YTD"].Rows[0]["ExVeh"] / totalFiscalDays) * monthDaysRemaining);
        projDamageFees = totalDamageFees + (((decimal)Model.Tables["YTD"].Rows[0]["DamageFees"] / totalFiscalDays) * monthDaysRemaining);
        projLate = totalLate + (((decimal)Model.Tables["YTD"].Rows[0]["LateFees"] / totalFiscalDays) * monthDaysRemaining);
        projManRef = totalManRef + (((decimal)Model.Tables["YTD"].Rows[0]["ManRefunds"] / totalFiscalDays) * monthDaysRemaining);
        projVisit = totalVisit + (((decimal)Model.Tables["YTD"].Rows[0]["VisitorFees"] / totalFiscalDays) * monthDaysRemaining);
        projGolf = totalGolf + (((decimal)Model.Tables["YTD"].Rows[0]["GolfRentals"] / totalFiscalDays) * monthDaysRemaining);
        projManRefGolf = totalManRefGolf + (((decimal)Model.Tables["YTD"].Rows[0]["ManRefundsGolf"] / totalFiscalDays) * monthDaysRemaining);
        projGross = totalGross + projSites + projRentals + projLockFees + projExVeh + projDamageFees + projLate - projManRef + projVisit + projGolf - projManRefGolf;
        projTaxLi = totalTaxLi + (projGross - ((projGross - projVisit - projGolf) / TwelveP) + (projVisit / FiveP) + (projGolf / EightP));
        projNetRevSub = totalNetRevSub + (projGross - projTaxLi);
        projAnnual = totalAnnual + (((decimal)Model.Tables["YTD"].Rows[0]["AnnualTotal"] / totalFiscalDays) * monthDaysRemaining);
        projEmployee = totalEmployee + (((decimal)Model.Tables["YTD"].Rows[0]["Employee"] / totalFiscalDays) * monthDaysRemaining);
        projLTS = totalLTS + (((decimal)Model.Tables["YTD"].Rows[0]["LTSites"] / totalFiscalDays) * monthDaysRemaining);
        projLTR = totalLTR + (((decimal)Model.Tables["YTD"].Rows[0]["LTRentals"] / totalFiscalDays) * monthDaysRemaining);
        projMHP = totalMHP + (((decimal)Model.Tables["YTD"].Rows[0]["MHPark"] / totalFiscalDays) * monthDaysRemaining);
        projManRef2 = totalManRef2 + (((decimal)Model.Tables["YTD"].Rows[0]["ManRefundsNT"] / totalFiscalDays) * monthDaysRemaining);
        projNonTaxSub = totalNonTaxSub + projAnnual + projEmployee + projLTS + projLTR + projMHP - projManRef2;
        projStorage = totalStorage + (((decimal)Model.Tables["YTD"].Rows[0]["Storage"] / totalFiscalDays) * monthDaysRemaining);
        projTransf = totalTransf + (((decimal)Model.Tables["YTD"].Rows[0]["TransferFees"] / totalFiscalDays) * monthDaysRemaining);
        projMisc = totalMisc + (((decimal)Model.Tables["YTD"].Rows[0]["Misc"] / totalFiscalDays) * monthDaysRemaining);
        projManRef3 = totalManRef3 + (((decimal)Model.Tables["YTD"].Rows[0]["ManRefundsNT2"] / totalFiscalDays) * monthDaysRemaining);
        projNonTax = totalNonTax + projStorage + projTransf + projMisc - projManRef3;
        projNetRevenue1 = totalNetRevenue1 + projNetRevSub + projNonTaxSub + projNonTax;
        <tr>
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM") Totals<sup>*</sup>:</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projSites)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projRentals)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projLockFees)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projExVeh)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projDamageFees)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projLate)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projManRef)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projVisit)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projGolf)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projManRefGolf)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projGross)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTaxLi)</td>      
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNetRevSub)</td>
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM") Totals<sup>*</sup>:</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projAnnual)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projEmployee)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projLTS)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projLTR)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projMHP)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projManRef2)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNonTaxSub)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projStorage)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTransf)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projMisc)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projManRef3)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNonTax)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNetRevenue1)</td>
        </tr>
    }
    @foreach (DataRow row in Model.Tables["prior"].Rows)
    {
        ptotalSites += (decimal)row["SiteTotal"];
        ptotalRentals += (decimal)row["RentalsTotal"];
        ptotalLockFees += (decimal)row["LocksTotal"];
        ptotalExVeh += (decimal)row["ExVeh"];
        ptotalDamageFees += (decimal)row["DamageFees"];
        ptotalLate += (decimal)row["LateFees"];
        ptotalManRef += (decimal)row["ManRefunds"];
        ptotalVisit += (decimal)row["VisitorFees"];
        ptotalGolf += (decimal)row["GolfRentals"];
        ptotalManRefGolf += (decimal)row["ManRefundsGolf"];
        ptotalAnnual += (decimal)row["AnnualTotal"];
        ptotalEmployee += (decimal)row["Employee"];
        ptotalLTS += (decimal)row["LTSites"];
        ptotalLTR += (decimal)row["LTRentals"];
        ptotalMHP += (decimal)row["MHPark"];
        ptotalManRef2 += (decimal)row["ManRefundsNT"];
        ptotalStorage += (decimal)row["Storage"];
        ptotalTransf += (decimal)row["TransferFees"];
        ptotalMisc += (decimal)row["Misc"];
        ptotalManRef3 += (decimal)row["ManRefundsNT2"];
        ptotalGross = ptotalSites + ptotalRentals + ptotalLockFees + ptotalExVeh + ptotalDamageFees + ptotalVisit + ptotalGolf - ptotalManRef - ptotalManRefGolf;
        var pnewp = ((ptotalGross - ptotalVisit - ptotalGolf) / TwelveP) + (ptotalVisit / FiveP) + (ptotalGolf / EightP);
        ptotalTaxLi = ptotalGross - pnewp;
        ptotalNetRevSub = ptotalGross - totalTaxLi;
        ptotalNonTaxSub = ptotalAnnual + ptotalEmployee + ptotalLTS + ptotalLTR + ptotalMHP - ptotalManRef2;
        ptotalNonTax = ptotalStorage + ptotalTransf + ptotalMisc - ptotalManRef3;
        ptotalNetRevenue1 = ptotalNetRevSub + ptotalNonTaxSub + ptotalNonTax;
    }
    <tr>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-1).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalSites)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalRentals)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalLockFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalExVeh)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalDamageFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalLate)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalManRef)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalVisit)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalManRefGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalGross)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTaxLi)</td>      
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNetRevSub)</td>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-1).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalAnnual)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalEmployee)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalLTS)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalLTR)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalMHP)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalManRef2)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNonTaxSub)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalStorage)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTransf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalMisc)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalManRef3)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNonTax)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNetRevenue1)</td>
    </tr>
    @foreach (DataRow row in Model.Tables["prior2"].Rows)
    {
        p2totalSites += (decimal)row["SiteTotal"];
        p2totalRentals += (decimal)row["RentalsTotal"];
        p2totalLockFees += (decimal)row["LocksTotal"];
        p2totalExVeh += (decimal)row["ExVeh"];
        p2totalDamageFees += (decimal)row["DamageFees"];
        p2totalLate += (decimal)row["LateFees"];
        p2totalManRef += (decimal)row["ManRefunds"];
        p2totalVisit += (decimal)row["VisitorFees"];
        p2totalGolf += (decimal)row["GolfRentals"];
        p2totalManRefGolf += (decimal)row["ManRefundsGolf"];
        p2totalAnnual += (decimal)row["AnnualTotal"];
        p2totalEmployee += (decimal)row["Employee"];
        p2totalLTS += (decimal)row["LTSites"];
        p2totalLTR += (decimal)row["LTRentals"];
        p2totalMHP += (decimal)row["MHPark"];
        p2totalManRef2 += (decimal)row["ManRefundsNT"];
        p2totalStorage += (decimal)row["Storage"];
        p2totalTransf += (decimal)row["TransferFees"];
        p2totalMisc += (decimal)row["Misc"];
        p2totalManRef3 += (decimal)row["ManRefundsNT2"];
        p2totalGross = p2totalSites + p2totalRentals + p2totalLockFees + p2totalExVeh + p2totalDamageFees + p2totalVisit + p2totalGolf - p2totalManRef - p2totalManRefGolf;
        var pnew2 = ((p2totalGross - p2totalVisit - p2totalGolf) / TwelveP) + (p2totalVisit / FiveP) + (p2totalGolf / EightP);
        p2totalTaxLi = p2totalGross - pnew2;
        p2totalNetRevSub = p2totalGross - totalTaxLi;
        p2totalNonTaxSub = p2totalAnnual + p2totalEmployee + p2totalLTS + p2totalLTR + p2totalMHP - p2totalManRef2;
        p2totalNonTax = p2totalStorage + p2totalTransf + p2totalMisc - p2totalManRef3;
        p2totalNetRevenue1 = p2totalNetRevSub + p2totalNonTaxSub + p2totalNonTax;
    }
    <tr>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-2).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalSites)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalRentals)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalLockFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalExVeh)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalDamageFees)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalLate)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalManRef)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalVisit)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalManRefGolf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalGross)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTaxLi)</td>      
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNetRevSub)</td>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-2).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalAnnual)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalEmployee)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalLTS)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalLTR)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalMHP)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalManRef2)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNonTaxSub)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalStorage)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTransf)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalMisc)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalManRef3)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNonTax)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNetRevenue1)</td>
    </tr>
   @{
        decimal deltaSites = 0;
        decimal deltaRentals = 0;
        decimal deltaLockFees = 0;
        decimal deltaExVeh = 0;
        decimal deltaDamageFees = 0;
        decimal deltaLate = 0;
        decimal deltaManRef = 0;
        decimal deltaVisit = 0;
        decimal deltaTaxLi = 0;
        decimal deltaGolf = 0;
        decimal deltaManRefGolf = 0;
        decimal deltaGross = 0;
        decimal deltaNetRevSub = 0;
        decimal deltaAnnual = 0;
        decimal deltaEmployee = 0;
        decimal deltaLTS = 0;
        decimal deltaLTR = 0;
        decimal deltaMHP = 0;
        decimal deltaManRef2 = 0;
        decimal deltaNonTaxSub = 0;
        decimal deltaStorage = 0;
        decimal deltaTransf = 0;
        decimal deltaMisc = 0;
        decimal deltaManRef3 = 0;
        decimal deltaNonTax = 0;
        decimal deltaNetRevenue1 = 0;
    }
    @if (startDate.Month == currentDate.Month)
    {
        deltaSites = projSites - ptotalSites;
        deltaRentals = projRentals - ptotalRentals;
        deltaLockFees = projLockFees - ptotalLockFees;
        deltaExVeh = projExVeh - ptotalExVeh;
        deltaDamageFees = projDamageFees - ptotalDamageFees;
        deltaLate = projLate - ptotalLate;
        deltaManRef = projManRef - ptotalManRef;
        deltaVisit = projVisit - ptotalVisit;
        deltaGolf = projGolf - ptotalGolf;
        deltaManRefGolf = projManRefGolf - ptotalManRefGolf;
        deltaAnnual = projAnnual - ptotalAnnual;
        deltaEmployee = projEmployee - ptotalEmployee;
        deltaLTS = projLTS - ptotalLTS;
        deltaLTR = projLTR - ptotalLTR;
        deltaMHP = projMHP - ptotalMHP;
        deltaManRef2 = projManRef2 - ptotalManRef2;
        deltaStorage = projStorage - ptotalStorage;
        deltaTransf = projTransf - ptotalTransf;
        deltaMisc = projMisc - ptotalMisc;
        deltaManRef3 = projManRef3 - ptotalManRef3;
    }
    else
    {
        deltaSites = totalSites - ptotalSites;
        deltaRentals = totalRentals - ptotalRentals;
        deltaLockFees = totalLockFees - ptotalLockFees;
        deltaExVeh = totalExVeh - ptotalExVeh;
        deltaDamageFees = totalDamageFees - ptotalDamageFees;
        deltaLate = totalLate - ptotalLate;
        deltaManRef = totalManRef - ptotalManRef;
        deltaVisit = totalVisit - ptotalVisit;
        deltaGolf = totalGolf - ptotalGolf;
        deltaManRefGolf = totalManRefGolf - ptotalManRefGolf;
        deltaAnnual = totalAnnual - ptotalAnnual;
        deltaEmployee = totalEmployee - ptotalEmployee;
        deltaLTS = totalLTS - ptotalLTS;
        deltaLTR = totalLTR - ptotalLTR;
        deltaMHP = totalMHP - ptotalMHP;
        deltaManRef2 = totalManRef2 - ptotalManRef2;
        deltaStorage = totalStorage - ptotalStorage;
        deltaTransf = totalTransf - ptotalTransf;
        deltaMisc = totalMisc - ptotalMisc;
        deltaManRef3 = totalManRef3 - ptotalManRef3;
    }
    @{
        deltaGross = deltaSites + deltaRentals + deltaLockFees + deltaExVeh + deltaDamageFees + deltaVisit + deltaGolf - deltaManRef - deltaManRefGolf;
        var pnewd = ((deltaGross - deltaVisit - deltaGolf) / TwelveP) + (deltaVisit / FiveP) + (deltaGolf / EightP);
        deltaTaxLi = deltaGross - pnewd;
        deltaNetRevSub = deltaGross - deltaTaxLi;
        deltaNonTaxSub = deltaAnnual + deltaEmployee + deltaLTS + deltaLTR + deltaMHP - deltaManRef2;
        deltaNonTax = deltaStorage + deltaTransf + deltaMisc - deltaManRef3;
        deltaNetRevenue1 = deltaNetRevSub + deltaNonTaxSub + deltaNonTax;
    }
    <tr>
        @if (startDate.Month == currentDate.Month)
        {
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        else
        {
            <td class="breakdownMonthSmallText">@startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        <td class="@(deltaSites < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaSites)</td>
        <td class="@(deltaRentals < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaRentals)</td>
        <td class="@(deltaLockFees < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaLockFees)</td>
        <td class="@(deltaExVeh < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaExVeh)</td>
        <td class="@(deltaDamageFees < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaDamageFees)</td>
        <td class="@(deltaLate < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaLate)</td>
        <td class="@(deltaManRef < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaManRef)</td>
        <td class="@(deltaVisit < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaVisit)</td>
        <td class="@(deltaGolf < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaGolf)</td>
        <td class="@(deltaManRefGolf < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaManRefGolf)</td>
        <td class="@(deltaGross < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaGross)</td>
        <td class="@(deltaTaxLi < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTaxLi)</td>      
        <td class="@(deltaNetRevSub < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNetRevSub)</td>
        @if (startDate.Month == currentDate.Month)
        {
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        else
        {
            <td class="breakdownMonthSmallText">@startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        <td class="@(deltaAnnual < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaAnnual)</td>
        <td class="@(deltaEmployee < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaEmployee)</td>
        <td class="@(deltaLTS < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaLTS)</td>
        <td class="@(deltaLTR < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaLTR)</td>
        <td class="@(deltaMHP < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaMHP)</td>
        <td class="@(deltaManRef2 < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaManRef2)</td>
        <td class="@(deltaNonTaxSub < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNonTaxSub)</td>
        <td class="@(deltaStorage < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaStorage)</td>
        <td class="@(deltaTransf < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTransf)</td>
        <td class="@(deltaMisc < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaMisc)</td>
        <td class="@(deltaManRef3 < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaManRef3)</td>
        <td class="@(deltaNonTax < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNonTax)</td>
        <td class="@(deltaNetRevenue1 < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNetRevenue1)</td>
    </tr>
    @if (startDate.Month == currentDate.Month)
    {
        <tr>
            <td class="breakdownLegend" colspan="20"><sup>*</sup> Projected totals = month-to-date sum + year-to-date daily average * remainining number of days in the month.</td>
        </tr>
    }
</table>
}
</body>

@section Scripts { 
<script> 
var cells = document.querySelectorAll('tbody td.breakdownData, tbody td.breakdownTotals, tbody td.breakdownTax, tbody td.breakdownRef, tbody td.breakdownTotals2'); 
cells.forEach(function (cell) { 
   var amount = parseFloat(cell.textContent.replace(/[^0-9.-]+/g,"")); 
   if (!isNaN(amount)) { 
       if (amount == 0){
           cell.textContent = ' ';
       } else {
           if (amount < 0){
               cell.classList.add('negative-value');
               cell.textContent = '(' +  formatNumberWithCommas(Math.abs(amount).toFixed(2)) + ')';
           } else{
           cell.textContent = '$' + formatNumberWithCommas(amount.toFixed(2));
           }
       }
   } 
});
   $(document).ready(function () { 
       $(".clickable-tableF").on("click", function () { 
           var url = $(this).data("monthlybreakdown");
           console.log('Double-click detected on table. URL:', url); 
           if (url) { 
               console.log('Navigating to:', url); 
               window.location.href = url; 
           } else { 
               console.error('URL is undefined'); 
           } 
       }); 
   });

   function formatNumberWithCommas(number) {
       return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
   }
</script> 
}
</html>
