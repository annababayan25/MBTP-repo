@using System.Data
@using MBTP.Controllers
@using MBTP.Retrieval
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

@{
    DateTime startDate = ViewBag.date != null ? (DateTime)ViewBag.date : DateTime.Now.AddDays(-4);
    DateTime fiscalYearStartDate = ViewBag.fiscalYearStartDate;
    var whichMonth = ViewBag.WhichMonth;    
    var yearName = startDate.ToString("yyyy");
    DateTime currentDate = DateTime.Now;
    DateTime monthStart = new DateTime(startDate.Year, startDate.Month, 1);
    DateTime monthEnd = monthStart.AddMonths(1).AddDays(-1);
    int daysThisMonth = DateTime.DaysInMonth(startDate.Year, startDate.Month);
    TimeSpan daysDiff = monthStart - fiscalYearStartDate;
    int fiscalDays = daysDiff.Days - 1; // number of days elapsed in fiscal year prior to start of report month
    var EightP = 1.08m;
    var TenP = 1.105m;

    decimal combinedFood = 0;
    decimal totalNoTaxFood = 0;
    decimal totalPreparedFood = 0;
    decimal totalKayBo = 0;
    decimal totalPedBo = 0;
    decimal totalMisc = 0;
    decimal totalGrossRevenue = 0;
    decimal totalTaxCollected = 0;
    decimal totalNetRevenue = 0;
    decimal totalTaxExpected = 0;
    decimal ptotalNoTaxFood = 0;
    decimal ptotalPreparedFood = 0;
    decimal ptotalKayBo = 0;
    decimal ptotalPedBo = 0;
    decimal ptotalMisc = 0;
    decimal ptotalGrossRevenue = 0;
    decimal ptotalTaxCollected = 0;
    decimal ptotalNetRevenue = 0;
    decimal ptotalTaxExpected = 0;
    decimal p2totalNoTaxFood = 0;
    decimal p2totalPreparedFood = 0;
    decimal p2totalKayBo = 0;
    decimal p2totalPedBo = 0;
    decimal p2totalMisc = 0;
    decimal p2totalGrossRevenue = 0;
    decimal p2totalTaxCollected = 0;
    decimal p2totalNetRevenue = 0;
    decimal p2totalTaxExpected = 0;
    decimal projNoTaxFood = 0;
    decimal projPreparedFood = 0;
    decimal projKayBo = 0;
    decimal projPedBo = 0;
    decimal projMisc = 0;
    decimal projGrossRevenue = 0;
    decimal projTaxCollected = 0;
    decimal projNetRevenue = 0;
    decimal projTaxExpected = 0;
}
<div class='head-container'>
   <h1>Day-To-Day Information for @startDate.ToString("MMMM yyyy")</h1>
    <p>&nbsp;</p>
    @if(whichMonth != "None")
    {
        <a class="pdfButton" asp-area="" asp-controller="FDB" asp-action="Monthly" asp-route-whichMonth=@whichMonth>Back to selected month</a>
        <p>&nbsp;</p>
    }
   <p>Single click the table to jump to the month-by-month breakdown</p>
</div>

<body>
@if (Model is not null && Model.Tables[0].Rows.Count > 0)
{
<table id="daily-table" class="breakdown clickable-tableK"  data-MonthlyBreakdown="/FDB/MonthlyBreakdownK" style="width:240px">
    <tr>
        <th class="breakdownBigTitle" colspan="9">Kayak Shack</th>
    </tr>
    <tr>
        <th class="breakdownMonth" rowspan="2"><br><br>Day</th>
        <th class="breakdownTitle" colspan="1">317</th>
        <th class="breakdownTitle" colspan="1">352</th>
        <th class="breakdownTitle" colspan="1">354</th>
        @if(startDate.Month == currentDate.Month) 
        {
            <th class="breakdownTitle" rowspan="2">Misc Sales<sup>#</sup></th>
        }
        else
        {
            <th class="breakdownTitle" rowspan="2">Misc Sales</th>
        }
        <th class="breakdownTotalsHead" rowspan="2">Total Gross Revenue</th>
        <th class="breakdownTotalsHead" rowspan="2">Total Tax Collected</th>
        <th class="breakdownTotalsHead" rowspan="2">Total Net Revenue</th>
        <th class="breakdownTaxHead" rowspan="2">Total Tax Expected</th>
    </tr>
    <tr>
        @if(startDate.Date >= DateTime.Parse("06-01-2025"))
        {
            <th class="breakdownTitle">Prepared Food</th>
        }
        else
        {
            <th class="breakdownTitle">Non-Taxable Food</th>
        }
        <th class="breakdownTitle">Kayaks and Boards</th>
        <th class="breakdownTitle">Pedal Boats</th>
    </tr>
    @foreach (DataRow row in Model!.Tables[0].Rows)
    {
        var transDate = (DateTime)row["TransDate"];
        string searchExp = "Transdate = '" + transDate.ToShortDateString() + "'";
        bool blackedOutDate = false;
        DataRow[] blackoutRows = Model.Tables["Blackout"].Select(searchExp);
        if(blackoutRows.Length != 0)
        {
            DataRow blackoutRow = blackoutRows[0];
            if((int)blackoutRow["KayakClosedState"] != 0)
            {
                blackedOutDate = true;
            }
        }
        var noTaxFood = (decimal)row["NonTaxFoodK"];
        var PreparedFood = (decimal)row["PreparedFoodK"];
        var KayBo= (decimal)row["KayAndBo"];
        var PedBo= (decimal)row["PedBo"];
        var Misc= (decimal)row["MiscK"];
        var gross = ((PedBo+KayBo))+Misc+noTaxFood+PreparedFood;
        var taxCollected = (decimal)row["TaxK"];
        var netRevenue = ((PedBo+KayBo)/EightP)+Misc+noTaxFood+(PreparedFood/TenP);
        var taxExpected =  PedBo+KayBo-((PedBo+KayBo)/EightP) + PreparedFood-(PreparedFood/TenP);

        totalNoTaxFood += noTaxFood;
        totalPreparedFood += PreparedFood;
        totalKayBo += KayBo;
        totalPedBo += PedBo;
        totalMisc += Misc;
        totalGrossRevenue += gross;
        totalTaxCollected += taxCollected;
        totalNetRevenue += netRevenue;
        totalTaxExpected += taxExpected;
        combinedFood = noTaxFood + PreparedFood;

        <tr class="colorAlt" data-date="@transDate.ToString("yyyy-MM-dd")">
            <td class="breakdownDate">@transDate.ToString("MM/dd")</td>
            @if(combinedFood + KayBo + PedBo + Misc == 0)
            {
                if(blackedOutDate && gross <= 0)
                {
                    <td class="alertData" colspan="4"><b>CLOSED</b></td>
                }
                else
                {
                    <td class="alertData" colspan="4"><b>MISSING DATA</b></td>
                }
            }
            else
            {
                <td class="breakdownData">@combinedFood</td>
                <td class="breakdownData">@KayBo</td>
                <td class="breakdownData">@PedBo</td>
                <td class="breakdownData">@Misc</td>
            }
            <td class="breakdownTotals">@gross</td>
            <td class="breakdownTotals">@taxCollected</td>
            <td class="breakdownTotals">@netRevenue</td>
            <td class="breakdownTax">@taxExpected</td>
        </tr>
    }
    @{
        combinedFood = totalNoTaxFood + totalPreparedFood;
    }
    <tr>
        <td class="breakdownMonthSmallText">Month-to-Date Totals:</td>
        <td class="breakdownTotals2">@combinedFood</td>
        <td class="breakdownTotals2">@totalKayBo</td>
        <td class="breakdownTotals2">@totalPedBo</td>
        <td class="breakdownTotals2">@totalMisc</td>
        <td class="breakdownTotals2">@totalGrossRevenue</td>
        <td class="breakdownTotals2">@totalTaxCollected</td>
        <td class="breakdownTotals2">@totalNetRevenue</td>
        <td class="breakdownTotals2">@totalTaxExpected</td>
    </tr>
    @if (startDate.Month == currentDate.Month)
    {
        int totalFiscalDays = fiscalDays + Model.Tables[0].Rows.Count;
        int monthDaysRemaining = daysThisMonth - Model.Tables[0].Rows.Count;
        projNoTaxFood = totalNoTaxFood + (((decimal)Model.Tables["YTD"].Rows[0]["NonTaxFoodK"] / totalFiscalDays) * monthDaysRemaining);
        projPreparedFood = totalPreparedFood + (((decimal)Model.Tables["YTD"].Rows[0]["PreparedFoodK"] / totalFiscalDays) * monthDaysRemaining);
        projKayBo = totalKayBo + (((decimal)Model.Tables["YTD"].Rows[0]["KayAndBo"] / totalFiscalDays) * monthDaysRemaining);
        projPedBo = totalPedBo + (((decimal)Model.Tables["YTD"].Rows[0]["PedBo"] / totalFiscalDays) * monthDaysRemaining);
        projMisc = totalMisc;
        projGrossRevenue = projNoTaxFood + projKayBo + projPedBo + projMisc + projPreparedFood;
        projTaxCollected = totalTaxCollected +  + (((decimal)Model.Tables["YTD"].Rows[0]["TaxK"] / totalFiscalDays) * monthDaysRemaining);
        projNetRevenue = projGrossRevenue + projTaxCollected;
        projTaxExpected = totalTaxExpected + (projPedBo + projKayBo) - ((projPedBo + projKayBo)/EightP) + projPreparedFood - (projPreparedFood/TenP);
        combinedFood = projNoTaxFood + projPreparedFood;
        <tr>
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM") Totals<sup>*</sup>:</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", combinedFood)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projKayBo)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projPedBo)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projMisc)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projGrossRevenue)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTaxCollected)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNetRevenue)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTaxExpected)</td>
        </tr>
    }
    @foreach (DataRow row in Model.Tables["prior"].Rows)
    {
        ptotalNoTaxFood += (decimal)row["NonTaxFoodK"];
        ptotalPreparedFood += (decimal)row["PreparedFoodK"];
        ptotalKayBo += (decimal)row["KayAndBo"];
        ptotalPedBo += (decimal)row["PedBo"];
        ptotalMisc += (decimal)row["MiscK"];
        ptotalGrossRevenue = ptotalNoTaxFood + ptotalKayBo + ptotalPedBo + ptotalMisc + ptotalPreparedFood;
        ptotalTaxCollected += (decimal)row["TaxK"];
        ptotalNetRevenue = ptotalGrossRevenue - ptotalTaxCollected;
        ptotalTaxExpected = (ptotalKayBo - (ptotalKayBo / EightP)) + (ptotalPedBo - (ptotalPedBo / EightP)) + (ptotalPreparedFood - (ptotalPreparedFood/TenP));
        combinedFood = ptotalNoTaxFood + ptotalPreparedFood;
    }
    <tr>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-1).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", combinedFood)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalKayBo)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalPedBo)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalMisc)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalGrossRevenue)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTaxCollected)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNetRevenue)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTaxExpected)</td>
    </tr>
    @foreach (DataRow row in Model.Tables["prior2"].Rows)
    {
        p2totalNoTaxFood += (decimal)row["NonTaxFoodK"];
        p2totalPreparedFood += (decimal)row["PreparedFoodK"];
        p2totalKayBo += (decimal)row["KayAndBo"];
        p2totalPedBo += (decimal)row["PedBo"];
        p2totalMisc += (decimal)row["MiscK"];
        p2totalGrossRevenue = p2totalNoTaxFood + p2totalKayBo + p2totalPedBo + p2totalMisc + p2totalPreparedFood;
        p2totalTaxCollected += (decimal)row["TaxK"];
        p2totalNetRevenue = p2totalGrossRevenue - p2totalTaxCollected;
        p2totalTaxExpected = (p2totalKayBo - (p2totalKayBo / EightP)) + (p2totalPedBo - (p2totalPedBo / EightP)) + (p2totalPreparedFood - (p2totalPreparedFood/TenP));
        combinedFood = p2totalNoTaxFood + p2totalPreparedFood;
    }
    <tr>
        <td class="breakdownMonthSmallText">@startDate.AddYears(-2).ToString("MMM yyyy") Totals:</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", combinedFood)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalKayBo)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalPedBo)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalMisc)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalGrossRevenue)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTaxCollected)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNetRevenue)</td>
        <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTaxExpected)</td>
    </tr>
    @{
        decimal deltaNoTaxFood = 0;
        decimal deltaPreparedFood = 0;
        decimal deltaKayBo = 0;
        decimal deltaPedBo = 0;
        decimal deltaMisc = 0;
        decimal deltaGrossRevenue = 0;
        decimal deltaTaxCollected = 0;
        decimal deltaNetRevenue = 0;
        decimal deltaTaxExpected = 0;
    }
    @if (startDate.Month == currentDate.Month)
    {
        deltaNoTaxFood = projNoTaxFood - ptotalNoTaxFood;
        deltaPreparedFood = projPreparedFood - ptotalPreparedFood;
        deltaKayBo = projKayBo - ptotalKayBo;
        deltaPedBo = projPedBo - ptotalPedBo;
        deltaMisc = projMisc - ptotalMisc;
        deltaGrossRevenue = projGrossRevenue - ptotalGrossRevenue;
        deltaTaxCollected = projTaxCollected - ptotalTaxCollected;
        deltaNetRevenue = projNetRevenue - ptotalNetRevenue;
        deltaTaxExpected = projTaxExpected - ptotalTaxExpected;
    }
    else
    {
        deltaNoTaxFood = totalNoTaxFood - ptotalNoTaxFood;
        deltaPreparedFood = totalPreparedFood - ptotalPreparedFood;
        deltaKayBo = totalKayBo - ptotalKayBo;
        deltaPedBo = totalPedBo - ptotalPedBo;
        deltaMisc = totalMisc - ptotalMisc;
        deltaGrossRevenue = totalGrossRevenue - ptotalGrossRevenue;
        deltaTaxCollected = totalTaxCollected - ptotalTaxCollected;
        deltaNetRevenue = totalNetRevenue - ptotalNetRevenue;
        deltaTaxExpected = totalTaxExpected - ptotalTaxExpected;
    }
    @{
        combinedFood = deltaNoTaxFood + deltaPreparedFood;
    }
    <tr>
        @if (startDate.Month == currentDate.Month)
        {
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        else
        {
            <td class="breakdownMonthSmallText">@startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        <td class="@(deltaNoTaxFood < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", combinedFood)</td>
        <td class="@(deltaKayBo < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaKayBo)</td>
        <td class="@(deltaPedBo < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaPedBo)</td>
        <td class="@(deltaMisc < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaMisc)</td>
        <td class="@(deltaGrossRevenue < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaGrossRevenue)</td>
        <td class="@(deltaTaxCollected < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTaxCollected)</td>
        <td class="@(deltaNetRevenue < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNetRevenue)</td>
        <td class="@(deltaTaxExpected  < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTaxExpected)</td>
    </tr>
    @if (startDate.Month == currentDate.Month)
    {
        <tr>
            <td class="breakdownLegend" colspan="20"><sup>*</sup> Projected totals = month-to-date sum + year-to-date daily average * remainining number of days in the month.</td>
        </tr>
        <tr>
            <td class="breakdownLegend" colspan="20"><sup>#</sup> Projected total for this column assumes no addtional income beyond to-date total for the month.</td>
        </tr>
    }
    </table>
}
</body>
@section Scripts { 
<script> 
var cells = document.querySelectorAll('tbody td.breakdownData, tbody td.breakdownTotals, tbody td.breakdownTax, tbody td.breakdownRef, tbody td.breakdownTotals2'); 
cells.forEach(function (cell) { 
    var amount = parseFloat(cell.textContent.replace(/[^0-9.-]+/g,"")); 
    if (!isNaN(amount)) { 
        if (amount == 0){
            cell.textContent = ' ';
        } else {
            if (amount < 0){
                cell.classList.add('negative-value');
                cell.textContent = '(' +  formatNumberWithCommas(Math.abs(amount).toFixed(2)) + ')';
            } else{
            cell.textContent = '$' + formatNumberWithCommas(amount.toFixed(2));
            }
        }
    } 
});
    $(document).ready(function () { 
            $(".clickable-tableK").on("click", function () { 
                var url = $(this).data("monthlybreakdown");
                console.log('single-click detected on table. URL:', url); 
                if (url) { 
                    console.log('Navigating to:', url); 
                    window.location.href = url; 
                } else { 
                    console.error('URL is undefined'); 
                } 
        }); 
});
function formatNumberWithCommas(number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
</script> 
}





