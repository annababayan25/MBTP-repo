@using System.Data
@using MBTP.Controllers
@using MBTP.Retrieval
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
@{
    DateTime startDate = ViewBag.date != null ? (DateTime)ViewBag.date : DateTime.Now.AddDays(-4);
    DateTime fiscalYearStartDate = ViewBag.fiscalYearStartDate;
    var whichMonth = ViewBag.WhichMonth;    
    var yearName = startDate.ToString("yyyy");
    DateTime currentDate = DateTime.Now;
    DateTime monthStart = new DateTime(startDate.Year, startDate.Month, 1);
    DateTime monthEnd = monthStart.AddMonths(1).AddDays(-1);
    int daysThisMonth = DateTime.DaysInMonth(startDate.Year, startDate.Month);
    TimeSpan daysDiff = monthStart - fiscalYearStartDate;
    int fiscalDays = daysDiff.Days - 1; // number of days elapsed in fiscal year prior to start of report month
    var TenP = 1.105m;

    decimal totalPreparedFoodA = 0;
    decimal totalArcadeGames = 0;
    decimal totalGrossRevenue = 0;
    decimal totalTaxCollected = 0;
    decimal totalNetRevenue = 0;
    decimal totalTaxExpected = 0;
    decimal ptotalPreparedFoodA = 0;
    decimal ptotalArcadeGames = 0;
    decimal ptotalGrossRevenue = 0;
    decimal ptotalTaxCollected = 0;
    decimal ptotalNetRevenue = 0;
    decimal ptotalTaxExpected = 0;
    decimal p2totalPreparedFoodA = 0;
    decimal p2totalArcadeGames = 0;
    decimal p2totalGrossRevenue = 0;
    decimal p2totalTaxCollected = 0;
    decimal p2totalNetRevenue = 0;
    decimal p2totalTaxExpected = 0;
    decimal projPreparedFoodA = 0;
    decimal projArcadeGames = 0;
    decimal projGrossRevenue = 0;
    decimal projTaxCollected = 0;
    decimal projNetRevenue = 0;
    decimal projTaxExpected = 0;
}

<div class='head-container'>
   <h1>Day-To-Day Information for @startDate.ToString("MMMM yyyy")</h1>
    <p>&nbsp;</p>
    @if(whichMonth != "None")
    {
        <a class="pdfButton" asp-area="" asp-controller="FDB" asp-action="Monthly" asp-route-whichMonth=@whichMonth>Back to selected month</a>
        <p>&nbsp;</p>
    }
   <p>Single click the table to jump to the month-by-month breakdown</p>
</div>

<body>
@if (Model is not null && Model.Tables[0].Rows.Count > 0)
{
<table id="daily-table" class="breakdown clickable-tableA" data-MonthlyBreakdown="/FDB/MonthlyBreakdownA" style="width:240px">
   <tr>
       <td class="breakdownBigTitle" colspan="7">Snack Bar/Arcade</td>
   </tr>
   <tr>
       <th class="breakdownMonth" rowspan="2">Day</th>
       <th class="breakdownTitle">318</th>
       <th class="breakdownTitle">348</th>
       <th class="breakdownTotalsHead" rowspan="2">Total Gross Revenue</th>
       <th class="breakdownTotalsHead" rowspan="2">Total Tax Collected</th>
       <th class="breakdownTotalsHead" rowspan="2">Total Net Revenue</th>
       <th class="breakdownTaxHead" rowspan="2">Total Tax Expected</th>
   </tr>
   <tr>
       <th class="breakdownTitle">Prepared Food</th>
       @if(startDate.Month == currentDate.Month) 
       {
            <th class="breakdownTitle">Arcade Games<sup>#</sup></th>
       }
       else
       {
            <th class="breakdownTitle">Arcade Games</th>
       }
   </tr>
   @foreach (DataRow row in Model!.Tables[0].Rows)
   {
       var transDate = (DateTime)row["TransDate"];
        string searchExp = "Transdate = '" + transDate.ToShortDateString() + "'";
        bool blackedOutDate = false;
        DataRow[] blackoutRows = Model.Tables["Blackout"].Select(searchExp);
        if(blackoutRows.Length != 0)
        {
            DataRow blackoutRow = blackoutRows[0];
            if((int)blackoutRow["ArcadeClosedState"] != 0)
            {
                blackedOutDate = true;
            }
        }
       var preparedFoodA = (decimal)row["PreparedFoodA"];
       var arcadeGames = (decimal)row["ArcadeGames"];
       var grossRevenue = preparedFoodA + arcadeGames;
       var taxCollected = (decimal)row["TaxA"];
       var netRevenue = grossRevenue - taxCollected;
       var taxExpected = preparedFoodA - (preparedFoodA / TenP);

       totalPreparedFoodA += preparedFoodA;
       totalArcadeGames += arcadeGames;
       totalGrossRevenue += grossRevenue;
       totalTaxCollected += taxCollected;
       totalNetRevenue += netRevenue;
       totalTaxExpected += taxExpected;

       <tr class="colorAlt" data-date="@transDate.ToString("yyyy-MM-dd")">
           <td class="breakdownDate">@transDate.ToString("MM/dd")</td>
            @if(preparedFoodA == 0)
            {
                if(blackedOutDate && grossRevenue <= 0)
                {
                    <td class="alertData"><b>CLOSED</b></td>
                }
                else
                {
                    <td class="alertData"><b>MISSING DATA</b></td>
                }
            }
            else
            {
                <td class="breakdownData">@String.Format("{0:F2}", preparedFoodA)</td>
            }
           <td class="breakdownData">@String.Format("{0:F2}", arcadeGames)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", grossRevenue)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", taxCollected)</td>
           <td class="breakdownTotals">@String.Format("{0:F2}", netRevenue)</td>
           <td class="breakdownTax">@String.Format("{0:F2}", taxExpected)</td>
       </tr>
   }
   <tr>
       <td class="breakdownMonthSmallText">Month-to-Date Totals:</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalPreparedFoodA)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalArcadeGames)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalGrossRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalTaxCollected)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalNetRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", totalTaxExpected)</td>
   </tr>
    @if (startDate.Month == currentDate.Month)
    {
        int totalFiscalDays = fiscalDays + Model.Tables[0].Rows.Count;
        int monthDaysRemaining = daysThisMonth - Model.Tables[0].Rows.Count;
        projPreparedFoodA = totalPreparedFoodA + (((decimal)Model.Tables["YTD"].Rows[0]["PreparedFoodA"] / totalFiscalDays) * monthDaysRemaining);
        projArcadeGames = totalArcadeGames;  // we don't assume any additional revenue for this category
        projGrossRevenue = projPreparedFoodA + projArcadeGames;
        projTaxCollected = totalTaxCollected + (((decimal)Model.Tables["YTD"].Rows[0]["TaxA"] / totalFiscalDays) * monthDaysRemaining);
        projNetRevenue = projGrossRevenue - projTaxCollected;
        projTaxExpected = (projPreparedFoodA - (projPreparedFoodA / TenP)) ;
        <tr>
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM") Totals<sup>*</sup>:</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projPreparedFoodA)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projArcadeGames)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projGrossRevenue)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTaxCollected)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projNetRevenue)</td>
            <td class="breakdownTotals2">@String.Format("{0:F2}", projTaxExpected)</td>
        </tr>
    }
    @foreach (DataRow row in Model.Tables["prior"].Rows)
    {
        ptotalPreparedFoodA += (decimal)row["PreparedFoodA"];
        ptotalArcadeGames += (decimal)row["ArcadeGames"];
        ptotalGrossRevenue = ptotalPreparedFoodA + ptotalArcadeGames;
        ptotalTaxCollected += (decimal)row["TaxA"];
        ptotalNetRevenue = ptotalGrossRevenue - ptotalTaxCollected;
        ptotalTaxExpected = ptotalPreparedFoodA - (ptotalPreparedFoodA / TenP);
    }
   <tr>
       <td class="breakdownMonthSmallText">@startDate.AddYears(-1).ToString("MMM yyyy") Totals:</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalPreparedFoodA)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalArcadeGames)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalGrossRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTaxCollected)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalNetRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", ptotalTaxExpected)</td>
   </tr>
    @foreach (DataRow row in Model.Tables["prior2"].Rows)
    {
        p2totalPreparedFoodA += (decimal)row["PreparedFoodA"];
        p2totalArcadeGames += (decimal)row["ArcadeGames"];
        p2totalGrossRevenue = p2totalPreparedFoodA + p2totalArcadeGames;
        p2totalTaxCollected += (decimal)row["TaxA"];
        p2totalNetRevenue = p2totalGrossRevenue - p2totalTaxCollected;
        p2totalTaxExpected = p2totalPreparedFoodA - (p2totalPreparedFoodA / TenP);
    }
   <tr>
       <td class="breakdownMonthSmallText">@startDate.AddYears(-2).ToString("MMM yyyy") Totals:</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalPreparedFoodA)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalArcadeGames)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalGrossRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTaxCollected)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalNetRevenue)</td>
       <td class="breakdownTotals2">@String.Format("{0:F2}", p2totalTaxExpected)</td>
   </tr>
    @{
        decimal deltaPreparedFoodA;
        decimal deltaArcadeGames;
        decimal deltaGrossRevenue;
        decimal deltaTaxCollected;
        decimal deltaNetRevenue;
        decimal deltaTaxExpected;
    }
    @if (startDate.Month == currentDate.Month)
    {
        deltaPreparedFoodA = projPreparedFoodA - ptotalPreparedFoodA;
        deltaArcadeGames = projArcadeGames - ptotalArcadeGames;
        deltaGrossRevenue = projGrossRevenue - ptotalGrossRevenue;
        deltaTaxCollected = projTaxCollected - ptotalTaxCollected;
        deltaNetRevenue = projNetRevenue - ptotalNetRevenue;
        deltaTaxExpected = projTaxExpected - ptotalTaxExpected;
    }
    else
    {
        deltaPreparedFoodA = totalPreparedFoodA - ptotalPreparedFoodA;
        deltaArcadeGames = totalArcadeGames - ptotalArcadeGames;
        deltaGrossRevenue = totalGrossRevenue - ptotalGrossRevenue;
        deltaTaxCollected = totalTaxCollected - ptotalTaxCollected;
        deltaNetRevenue = totalNetRevenue - ptotalNetRevenue;
        deltaTaxExpected = totalTaxExpected - ptotalTaxExpected;
    }
    <tr>
        @if (startDate.Month == currentDate.Month)
        {
            <td class="breakdownMonthSmallText">Projected @startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        else
        {
            <td class="breakdownMonthSmallText">@startDate.ToString("MMM yyyy") Over/Under:</td>
        }
        <td class="@(deltaPreparedFoodA < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaPreparedFoodA)</td>
        <td class="@(deltaArcadeGames < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaArcadeGames)</td>
        <td class="@(deltaGrossRevenue < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaGrossRevenue)</td>
        <td class="@(deltaTaxCollected < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTaxCollected)</td>
        <td class="@(deltaNetRevenue < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaNetRevenue)</td>
        <td class="@(deltaTaxExpected  < 0 ? "breakdownUnder" : "breakdownOver")">@String.Format("{0:c2}", deltaTaxExpected)</td>
    </tr>
    @if (startDate.Month == currentDate.Month)
    {
        <tr>
            <td class="breakdownLegend" colspan="20"><sup>*</sup> Projected totals = month-to-date sum + year-to-date daily average * remainining number of days in the month.</td>
        </tr>
        <tr>
            <td class="breakdownLegend" colspan="20"><sup>#</sup> Projected total for this column assumes no addtional income beyond to-date total for the month.</td>
        </tr>
    }
</table>
}
</body>

@section Scripts { 
<script> 
var cells = document.querySelectorAll('tbody td.breakdownData, tbody td.breakdownTotals, tbody td.breakdownTax, tbody td.breakdownRef, tbody td.breakdownTotals2'); 
cells.forEach(function (cell) { 
   var amount = parseFloat(cell.textContent.replace(/[^0-9.-]+/g,"")); 
   if (!isNaN(amount)) { 
       if (amount == 0){
           cell.textContent = ' ';
       } else {
           if (amount < 0){
               cell.classList.add('negative-value');
               cell.textContent = '(' +  formatNumberWithCommas(Math.abs(amount).toFixed(2)) + ')';
           } else{
           cell.textContent = '$' + formatNumberWithCommas(amount.toFixed(2));
           }
       }
   } 
});

$(document).ready(function () { 
    $(".clickable-tableA").on("click", function () { 
        var url = $(this).data("monthlybreakdown");
        console.log('Single-click detected on table. URL:', url); 
        if (url) { 
            console.log('Navigating to:', url); 
            window.location.href = url; 
        } else { 
            console.error('URL is undefined'); 
        } 
    }); 
});

function formatNumberWithCommas(number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
</script> 
}