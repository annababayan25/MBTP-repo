@model List<MBTP.Models.BlackoutDate>
@using Microsoft.AspNetCore.Mvc.Rendering

<script src="~/js/site.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

@{
    ViewData["Title"] = "Blackout Dates";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var locations = ViewBag.ProfitCenters as List<SelectListItem>;
    var grouped = Model
        .GroupBy(b => new { b.PCID, b.ProfitCenterName })
        .OrderBy(g => g.Key.PCID);
}

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" crossorigin="anonymous" />
   <script src="lightpick.js"></script>
   <link rel="stylesheet" href="~/css/site.css" />
</head>

<style>
   .color {
       background-color: #b4dfff;
   }

   .center {
       margin: auto;
       text-align: center;
       height: auto;
       width: 80%;
       max-width: 500px;
       border: 3px solid #b4dfff;
       padding: 30px 20px;
       border-radius: 10px;
       background-color: #ffffff;
   }

   .container {
       width: 100%;
       margin: 0 auto;
   }

   .pdfButton {
       background-color: #b4dfff;
       border: none;
       color: rgb(0, 0, 0);
       padding: 10px 20px;
       text-align: center;
       text-decoration: none;
       display: inline-block;
       font-size: 16px;
       margin: 4px 2px;
       cursor: pointer;
       border-radius: 5px;
   }

   .centered {
       text-align: center;
   }

   @@media (max-width: 600px) {
       .center {
           width: 90%;
           padding: 20px 10px;
       }

       .signOUT {
           font-size: 24px;
       }

       .pdfButton {
           padding: 8px 16px;
           font-size: 14px;
       }
   }

   .table {
       table-layout: fixed;
       width: 100%;
   }

   .blackout-table th:nth-child(3),
   .blackout-table td:nth-child(3) {
        width: 120px;
   }
    
   .active, .collapsible:hover {
       background-color: #555;
   }

   .collapsible {
       background-color: #777;
       color: white;
       cursor: pointer;
       padding: 18px;
       width: 100%;
       border: none;
       text-align: left;
       outline: none;
       font-size: 15px;
   }

   .content {
       max-height: 0;
       overflow: hidden;
       transition: max-height 0.4s ease-out;
   }
</style>


    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success centered">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger centered">@TempData["ErrorMessage"]</div>
    }

    <link rel="stylesheet" href="/static/theme/calendar-styles.css" />
    <div class="center">
        <div class="centered">
            <h3 class="">Add Blackout Date</h3>
            <br></br>
            <form id="addBlackoutForm" asp-action="AddBlackout" asp-controller="Admin" method="post">
                @Html.AntiForgeryToken()
                <div>
                    <label asp-for="@(new MBTP.Models.BlackoutDate().PCID)">Operation</label>
                    <select style="font-family: Garamond, serif" name="PCID" id="PCID" required>
                        <option value="">-- Select --</option>
                        @foreach (var item in locations.Where(pc => int.TryParse(pc.Value, out var val) && val >= 2 && val <= 5))
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <p>&nbsp;</p>
                <div>
                    <label asp-for="@(new MBTP.Models.BlackoutDate().StartDate)">Start Date</label>
                    <input style="font-family: Garamond, serif" type="date" name="StartDate" required />
                </div>
                <p>&nbsp;</p>
                <div>
                    <label asp-for="@(new MBTP.Models.BlackoutDate().EndDate)">End Date</label>
                    <input style="font-family: Garamond, serif" type="date" name="EndDate" required />
                </div>
                <p>&nbsp;</p>
                <div class="form-group mb-3">
                    <label asp-for="@(new MBTP.Models.BlackoutDate().Reason)">Reason</label>
                    <select id="ReasonDropdown" name="Reason" class="form-control" required>
                        <option value="">Select Reason</option>
                        <option value="Holiday">Holiday</option>
                        <option value="Weather">Weather</option>
                        <option value="Staffing">Staffing</option>
                        <option value="Seasonal">Seasonal</option>
                        <option value="Occupancy">Occupancy</option>
                        <option value="Maintenance">Maintenance</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="CustomReasonGroup" class="d-none mt-2">
                        <input id="CustomReason" name="CustomReason" type="text" class="form-control" placeholder="Enter custom reason" />
                    </div>
                </div>

                <p>&nbsp;</p>
                <div>
                    <button class="pdfButton" type="submit">Add</button>
                    &nbsp;&nbsp;&nbsp;
                    <a href="@Url.Action("Administration","Home")" class="pdfButton">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

<hr />
@if (Model.Any())
{
    <div class="container">
        <h3 class="centered">Current Blackout Dates</h3>
        @foreach (var group in grouped)
        {
            <div class="mb-5">
                <button type="button" class="collapsible">@group.Key.ProfitCenterName</button>
                <div class="content">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Reason</th>
                                <th>Duration</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in group)
                            {
                                var duration = (item.EndDate - item.StartDate).Days + 1;
                                <tr>
                                    <td>@item.StartDate.ToString("MMM dd, yyyy")</td>
                                    <td>@item.EndDate.ToString("MMM dd, yyyy")</td>
                                    <td>@item.Reason</td>
                                    <td>@duration day@(duration == 1 ? "" : "s")</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-primary edit-btn"
                                                data-id="@item.BlackoutID"
                                                data-pcid="@item.PCID"
                                                data-location-name="@item.ProfitCenterName"
                                                data-start="@item.StartDate:yyyy-MM-dd"
                                                data-end="@item.EndDate:yyyy-MM-dd"
                                                data-reason="@item.Reason"
                                                onclick="openEditModal(this)">
                                            Edit
                                        </button>
                                        <form asp-action="DeleteBlackout" method="post" style="display:inline;">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="id" value="@item.BlackoutID" />
                                            <button type="submit" class="btn btn-sm btn-danger">
                                                Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-success">
        <h4>No Blackout Dates Set</h4>
        <p>All locations are currently set to be open. Add blackout dates below for planned closures.</p>
    </div>
}

<div id="editModal" class="custom-modal">
    <div class="modal-content-custom">
        <div class="modal-header-custom">
            <h5>Edit Blackout Date</h5>
            <button type="button" class="close-btn" onclick="closeEditModal()">&times;</button>
        </div>
        <div class="modal-body-custom">
            <form id="editForm" method="post" asp-action="EditBlackout" asp-controller="Admin">
                @Html.AntiForgeryToken()
                <input type="hidden" id="EditBlackoutID" name="BlackoutID" />
                <input type="hidden" id="EditPCID" name="PCID" />

                <div class="form-group mb-3">
                    <label>Operation</label>
                    <input type="text" id="EditLocationDisplay" class="form-control" readonly />
                </div>

                <div class="form-group mb-3">
                    <label>Start Date</label>
                    <input type="date" id="EditStartDate" name="StartDate" class="form-control" required />
                </div>

                <div class="form-group mb-3">
                    <label>End Date</label>
                    <input type="date" id="EditEndDate" name="EndDate" class="form-control" required />
                </div>

                <div class="form-group mb-3">
                    <label>Reason</label>
                    <select id="EditReasonDropdown" name="Reason" class="form-control" required>
                        <option value="">Select Reason</option>
                        <option value="Holiday">Holiday</option>
                        <option value="Weather">Weather</option>
                        <option value="Staffing">Staffing</option>
                        <option value="Seasonal">Seasonal</option>
                        <option value="Occupancy">Occupancy</option>
                        <option value="Maintenance">Maintenance</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="EditCustomReasonGroup" class="d-none mt-2">
                        <input id="EditCustomReason" name="CustomReason" type="text" class="form-control" placeholder="Enter custom reason" />
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer-custom" style="text-align:right; margin-top:10px;">
            <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
            <button type="submit" form="editForm" class="btn btn-success">Save Changes</button>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Handle "Other" reason toggle
    document.getElementById('ReasonDropdown').addEventListener('change', function () {
        const customGroup = document.getElementById('CustomReasonGroup');
        const customInput = document.getElementById('CustomReason');
        if (this.value === 'Other') {
            customGroup.classList.remove('d-none');
            customInput.setAttribute('required', 'required');
        } else {
            customGroup.classList.add('d-none');
            customInput.removeAttribute('required');
            customInput.value = "";
        }
    });

    // Edit modal functions
    function openEditModal(button) {
        document.getElementById('EditBlackoutID').value = button.dataset.id;
        document.getElementById('EditPCID').value = button.dataset.pcid;
        document.getElementById('EditLocationDisplay').value = button.dataset.locationName;
        document.getElementById('EditStartDate').value = button.dataset.start;
        document.getElementById('EditEndDate').value = button.dataset.end;
        document.getElementById('EditReasonDropdown').value = button.dataset.reason;

        document.getElementById('EditReasonDropdown').dispatchEvent(new Event('change'));

        document.getElementById('editModal').style.display = 'block';
        document.body.style.overflow = 'hidden';
    }

    function closeEditModal() {
        document.getElementById('editModal').style.display = 'none';
        document.body.style.overflow = '';
    }

    document.getElementById('editModal').addEventListener('click', function (e) {
        if (e.target === this) {
            closeEditModal();
        }
    });

    document.getElementById('EditReasonDropdown').addEventListener('change', function () {
        const customGroup = document.getElementById('EditCustomReasonGroup');
        const customInput = document.getElementById('EditCustomReason');
        if (this.value === 'Other') {
            customGroup.classList.remove('d-none');
            customInput.setAttribute('required', 'required');
        } else {
            customGroup.classList.add('d-none');
            customInput.removeAttribute('required');
            customInput.value = "";
        }
    });

    // Submit handler for edit form
    document.getElementById('editForm').addEventListener('submit', function (e) {
        e.preventDefault();

        const formData = Object.fromEntries(new FormData(this));

        fetch('/Admin/EditBlackout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(err => {
            alert("An error occurred while saving changes.");
            console.error(err);
        });
    });

    var coll = document.getElementsByClassName("collapsible");
    for (let i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;

            if (content.style.maxHeight) {
                content.style.maxHeight = null; // collapse
            } else {
                content.style.maxHeight = content.scrollHeight + "px"; // expand
            }
        });
    }
</script>
}
